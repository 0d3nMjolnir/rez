###############################################################################
# START TEMPLATE
###############################################################################

# This file is a template. Code is read from this file and injected into the
# 'get-rez.py' file generated by the 'build-installer.py' script.

from optparse import OptionParser
import os
import sys
import os.path
import pkgutil
import textwrap


tmpdir = os.getcwd()

# cli
usage = "usage: %prog [options] INSTALL_PATH"
parser = OptionParser(usage=usage)
opts, args = parser.parse_args()

if len(args) != 1:
    parser.error("expected install path")
install_path = os.path.abspath(os.path.expanduser(args[0]))

# Construct and write out setup.cfg
from rez._installer import create_setup_cfg
content = create_setup_cfg(install_path)
cfg_file = os.path.join(tmpdir, "setup.cfg")
with open(cfg_file, 'w') as f:
    f.write(content)

# We need to extract the SSL certificates from requests so that they
# can be passed to --cert
cert_path = os.path.join(tmpdir, "cacert.pem")
with open(cert_path, "wb") as cert:
    cert.write(pkgutil.get_data("pip._vendor.requests", "cacert.pem"))

# Use an environment variable here so that users can still pass
# --cert via sys.argv
os.environ.setdefault("PIP_CERT", cert_path)

# install rez via pip
from rez import __version__
print "installing rez via pip..."
args = ["install", "--pre", "rez==%s" % __version__]
print "running: pip %s" % ' '.join(args)

import pip
ret = pip.main(args)
if ret:
    sys.exit(ret)

###############################################################################
# END TEMPLATE
###############################################################################

{"name":"Rez","tagline":"Rez - An integrated package configuration, build and deployment system for software","body":"##########################################################################################\r\n# INFO\r\n##########################################################################################\r\n\r\nRez:\r\nA set of tools for resolving environment configurations and building projects within\r\nthese environments. Rez searches for 'packages' (pieces of software) in the colon-delimited\r\nenv-var '$REZ_PACKAGES_PATH'. With rez you can request a set of packages, and it will\r\nreturn you all the packages that you need, or an equivalent configured environment. Rez has\r\na resolution algorithm that avoids package version clashes.\r\n\r\nOriginal Author:\r\nAllan Johns, 2010\r\nnerdvegas@googlemail.com\r\nDr D Studios, Sydney, Australia\r\n\r\nForked and Modified by:\r\nMorn√© Chamberlain, 2012\r\nmorne@blackginger.tv\r\nBlackGinger, Cape Town, South Africa\r\n\r\nRez has been tested on Linux Centos5, and to a lesser extent on OSX. Rez is not supported\r\non Windows (yet), but volunteers are welcome!\r\n\r\nrez requires:\r\nbash\r\ncmake (2.8 or greater)\r\na C++ compiler (it will use cmake to detect one)\r\npython (2.5 or greater)\r\npyyaml (tested with 3.9.0)\r\npydot (tested with 1.0.2)\r\npyparsing (tested with 1.5.1)\r\n\r\nrez-release requires:\r\nsvn (tested with svn client 1.6.6)\r\npysvn (tested with 1.7.2)\r\n\r\nrez-release-git requires:\r\ngit (tested with 1.7.2.3)\r\nGitPython (tested with 0.3.2-RC1)\r\n\r\n##########################################################################################\r\n# INSTALLATION\r\n##########################################################################################\r\n\r\nOpen the configure.sh script first, and edit the relevant entries in the \"EDIT HERE\" section.\r\nThis points rez at various paths (for example, python paths for pyyaml etc). It will attempt\r\nto autodetect what it can, but you'll probably need to set these to something (and you HAVE\r\nto set the first entry to something).\r\n\r\nAfter editing configure.sh and running it successfully, run install.sh, specifying the\r\ninstall location. Rez will be installed at that path, plus a version directory. Rez's\r\nversion is determined by the contents of the version.sh file.\r\n\r\nRez will automatically build you a number of key packages - one representing the operating\r\nsystem; one for cmake; one for python; one for a C++ compiler, and one example hello_world\r\npackage. Some of these may not be exactly what you want, it's up to you to create and use\r\nyour own packages instead.\r\n\r\n\r\n##########################################################################################\r\n# RUNNING REZ\r\n##########################################################################################\r\n\r\nOnce installed, you need to initialize the rez system by sourcing its init.sh file, which\r\nhas been installed alongside all the other rez source. It's typical to do this in a\r\nstartup script (eg ~/.bashrc), so that rez is always available to users.\r\n\r\nYou can test the system by running the demo (./examples/demo/run_demo.sh), but you do need\r\nto configure rez first, as explained above. The demo creates its own rez microcosm, setting\r\na local packages path, and building and installing a set of test packages into it.\r\n\r\nThere are further READMEs scattered through the distribution, refer to them for more info.\r\n\r\n\r\n##########################################################################################\r\n# DOCUMENTATION\r\n##########################################################################################\r\n\r\nThere are a lot of docs in the docs/ subdir, including the technical user manual. You\r\nshould read this sooner rather than later to like, learn things and stuff.\r\n\r\nThere are Rez tutorial videos available also, at the time of writing they're probably on\r\nVimeo or Youtube, and there may be a zipped download available from the same place you got\r\nthis Rez thing from.\r\n\r\nWhen building packages you'll need to know about rez's cmake macros. All rez's supporting\r\ncmake code can be found in the cmake/ subdir, and every source file contains a block\r\ncomment at the top detailing its use.\r\n\r\nThe vast majority of rez's command-line utilities will show a fair bit of help like so:\r\nrez-config -h\r\n\r\n\r\nHappy rezzing!\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
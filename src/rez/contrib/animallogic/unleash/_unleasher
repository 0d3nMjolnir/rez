#!/usr/bin/env python

import os

import unleash.config
import unleash.clientapi
import unleash.postevents

class UnleashError(Exception):
    pass


class Unleash(object):

    def __init__(self, name, version, base, message, description, flavour, target):

        self.name = name
        self.version = version
        self.base = base
        self.message = message
        self.description = description
        self.flavour = flavour
        self.target = target

        self._client = unleash.clientapi.UnleashClient()

    def ensureToolExists(self):
        """
        Ensure that the tool exists in the Unleash database.
        """

        toolInfo = self._client.getToolInfo(toolname=self.name)

        if not toolInfo:
            self._client.addTool(self.name, self.description)

    def ensureVersionExists(self):
        """
        Ensure that this version exists for the tool in the Unleash database.
        """

        toolVersions = self._client.getToolVersions(toolname=self.name, toolversion=self.version)

        if not toolVersions:
            self._client.addToolVersion(self.name, versionlabel=self.version, comment=self.message)

    def createBuildFlavour(self):
        """
        Create the build flavour, if one already exists for this version raise 
        an exception.
        """

        buildInfo = self._client.getToolBuildInfo(self.name, self.version, buildflavour=self.flavour)

        if buildInfo:
            raise UnleashError("The '%s' flavour already exists for '%s' version '%s'." % (self.flavour, self.name, self.version))

        else:
            files = self.getFilesFromPackage()
            self._client.addBuild(self.name, self.version, self.flavour, files, deleteoldfiles=True)

    def createRelease(self):
        """
        Create the release for this version.  If a release already exist, raise 
        an exception.
        """

        releases = self._client.getToolReleases(self.name, self.version, buildflavour=self.flavour, releasetarget=self.target)

        if releases:
            raise UnleashError("The '%s' flavour has already been released to the target '%s' for '%s' version '%s'." % (self.flavour, self.target, self.name, self.version))

        else:
            self._client.releaseTool(self.name, self.version, self.flavour, self.target, self.message)

    def getFilesFromPackage(self):
        """
        Inspect the Rez package to find all the files/folders that should be 
        Unleashed.

        @returns: a list of absolute paths
        @rtype: [str, ...]
        """

        files = [os.path.join(self.base, filename) for filename in os.listdir(self.base)]
        family = os.path.join(os.path.dirname(self.base), "family.yaml")

        if os.path.isfile(family):
            files.append(family)

        return files

    def unleash(self):
        """
        Execute the Unleash process.
        """
        
        self.ensureToolExists()
        self.ensureVersionExists()
        self.createBuildFlavour()
        self.createRelease()


if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser("_unleasher")
    parser.add_argument("-p", "--package", dest="package", required=True, 
                        help="The name of the package to Unleash.")
    parser.add_argument("-v", "--version", dest="version", required=True, 
                        help="The version of the package to Unleash.")
    parser.add_argument("-b", "--base", dest="base", required=True, 
                        help="The full path to the already rez-released package.")
    parser.add_argument("-m", "--message", dest="message", default="", 
                        help="Specify the release message.")
    parser.add_argument("-d", "--description", dest="description", default="", 
                        help="A description of the tool (should it not already exist in Unleash)")
    parser.add_argument("-f", "--flavour", dest="flavour", default="package",
                        help="The name of the Unleash flavour to use.")
    parser.add_argument("-t", "--target", dest="target", default="film_tools_packages",
                        help="The name of the Unleash target to use.")
    parser.add_argument("-e", "--test", dest="test", default=False, action="store_true",
                        help="Run Unleash in test mode.")
    parser.add_argument("-l", "--update-launcher", dest="update_launcher", default=False, action="store_true",
                        help="Notify Launcher of the version that is released.")

    args = parser.parse_args()

    # Remove the Launcher update event.  This stops us updating Launcher and
    # adversely affecting the unleash versions preset.  We might need to 
    # turn this off again in the future. 
    if not args.update_launcher:
        unleash.clientapi.UnleashClient.postReleaseEvents.remove(unleash.postevents.LauncherUpdatePostReleaseEvent)

    if args.test:
        unleash.config.TESTING = True
        unleash.config.setTestMode()
    
    unleash = Unleash(args.package, args.version, args.base, args.message, 
                      args.description, args.flavour, args.target)
    unleash.unleash()


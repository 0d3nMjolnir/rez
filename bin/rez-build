#!/bin/bash

#
## rez-build
##
## Usage:
## rez-build [-h] [-v <variant_num>] [-m earliest|latest(default)] -- [rez-cmake args] -- [make/equivalent args]
##
## A tool for configuring and running cmake for the project in the current directory, and possibly make (or equivalent).
## A 'package.yaml' file must exist in the current directory, and this drives the build. This utility is designed so
## that it is possible to either automatically build an entire matrix for a given project, or to perform the build for
## each variant manually. Note that in the following descriptions, 'make' is used to mean either make or equivalent.
## The different usage scenarios are described below.
##
## Common options:
## -h:	Display this help, and exit.
## -m:	Select resolution mode.
## -v:	Build for just one variant (zero-indexed)
## -t:	Ignore packages more recent than the given epoch time.
## -i:	Just print the path that the project would be installed to, and exit.
## -u:	Include blacklisted packages.
## -g:	Include archived packages.
## -d:	Do not assume dependency transitivity.
##
## Usage case 1:
## rez-build [-v <variant_num>] [-m earliest|latest(default)] [-- rez-cmake args]
##
## This will use the package.yaml to spawn the correct shell for each variant, and create a 'build-env.sh' script (named
## 'build-env.0.sh,..., build-env.N.sh for each variant). Invoking one of these scripts will spawn an environment and
## automatically run rez-cmake with the supplied arguments - you can then execute make within this context, and this will
## build the given variant. If zero or one variant exists, then 'build-env.sh' is generated.
##
## Usage case 2:
## rez-build [[-v <variant_num>] [-n]] [-m earliest|latest(default)] -- [rez-cmake args] -- [make args]
##
## This will use the package.yaml to spawn the correct shell for each variant, invoke rez-cmake, and then invoke make (or
## equivalent). Use rez-build in this way to automatically build the whole build matrix. rez-build does a 'make clean'
## before makeing by default, but the '-n' option suppresses this. Use -n in situations where you build a specific variant,
## and then want to install that variant without rebuilding everything again. This option is only available when one
## variant is being built, otherwise we run the risk of installing code that has been built for a different variant.
##
##
## Examples of use:
##
## rez-build [-h]
## Display this help, and exit.
##
## rez-build --
## Generate 'build-env.#.sh' files and invoke rez-cmake for each variant, but do not invoke make.
##
## rez-build -- --
## Builds all variants of the project, spawning the correct shell for each, and invoking make for each.
##
## rez-build -v 0 -- --
## Builds only the first variant of the project, spawning the correct shell, and invoking make.
##
## rez-build -v 0
## Equivalent to 'rez-build -v 0 --'
##
## rez-build -v 0 --
## Generate 'build-env.0.sh' and invoke rez-cmake for the first (zeroeth) variant.
##
## rez-build -v 1 -- --
## rez-build -v 1 -n -- -- install
## Build the second variant only, and then install it, avoiding a rebuild.
#

. _set-rez-env

rez_.py build "$@"

#    Copyright 2012 BlackGinger Pty Ltd (Cape Town, South Africa)
#
#    Copyright 2008-2012 Dr D Studios Pty Limited (ACN 127 184 954) (Dr. D Studios)
#
#    This file is part of Rez.
#
#    Rez is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    Rez is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with Rez.  If not, see <http://www.gnu.org/licenses/>.
